{"version":3,"sources":["SearchBar.js","youtube.js","VideoItem.js","VideoList.js","VideoDetails.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","useState","term","setTerm","className","onSubmit","event","preventDefault","onTermSubmit","htmlFor","id","type","value","onChange","target","axios","create","baseURL","params","part","maxResults","key","VideoItem","video","onVideoSelect","onClick","src","snippet","thumbnails","medium","url","alt","title","VideoList","videos","listRender","map","videoId","VideoDetails","videoSource","allowFullScreen","description","App","setVideos","selectedVideos","setSelectedVideos","darkTheme","setDarkTheme","a","async","youtube","get","q","response","data","items","useEffect","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb0d4f0f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction SearchBar(props){\r\n    const [term, setTerm] = useState(\"\");\r\n\r\n    const onInputChange = event => {\r\n        const { value } = event.target;\r\n\r\n        setTerm(value)\r\n    }\r\n\r\n    const onFormSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        props.onTermSubmit(term);\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <form className=\"form-group\" onSubmit={onFormSubmit} >\r\n                <div>\r\n                    <label htmlFor=\"searchBarInput\">Youtube Search</label>\r\n                    <input \r\n                        id=\"searchBarInput\"\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        value={term}\r\n                        onChange={onInputChange}\r\n                    />\r\n                    <small className=\"form-text text-muted\">Search YouTube Videos Here!</small>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import axios from \"axios\";\r\n\r\nconst KEY = \"AIzaSyA-OgLtu9vMpmxkLSvhB20E47TthzzPhms\";\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://www.googleapis.com/youtube/v3/\",\r\n    params: {\r\n        part: \"snippet\",\r\n        maxResults: 6,\r\n        key: `${KEY}`,\r\n    }\r\n});","import React, { useContext } from \"react\";\r\n\r\nimport \"./VideoItem.css\";\r\n\r\nfunction VideoItem({ video, onVideoSelect}){\r\n\r\n    return(\r\n        <div className=\"VideoItem\" onClick={() => onVideoSelect(video)} >\r\n            {/* <img   \r\n                src={video.snippet.thumbnails.medium.url}\r\n                alt={video.snippet.title}\r\n            />\r\n            <div>\r\n                <div>\r\n                    {video.snippet.title}\r\n                </div>\r\n            </div> */}\r\n            <div className=\"card bg-secondary text-light\">\r\n                <div className=\"row no-gutters\">\r\n                    <div className=\"col-6\">\r\n                        <img src={video.snippet.thumbnails.medium.url} className=\"img-fluid\" alt={video.snippet.title} />\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        <div className=\"card-block px-2\">\r\n                            <h5 className=\"card-title my-4\">{video.snippet.title}</h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoItem;","import React from \"react\";\r\nimport VideoItem from \"./VideoItem\";\r\n\r\nfunction VideoList({ videos, onVideoSelect }){\r\n    const listRender = videos.map(video => (\r\n        <VideoItem \r\n            key={video.id.videoId}\r\n            onVideoSelect={onVideoSelect}\r\n            video={video}\r\n        />\r\n    ));\r\n    return (\r\n        <div>\r\n            {listRender}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoList;","import React from \"react\";\r\n\r\nfunction VideoDetails({ video }){   \r\n    if(!video){\r\n        return (\r\n            <div>Please Search For Videos!</div>\r\n        )\r\n    }\r\n    const videoSource = `https://www.youtube.com/embed/${video.id.videoId}`\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"embed-responsive embed-responsive-16by9\">\r\n                <iframe className=\"embed-responsive-item\" title=\"video player\" src={videoSource} allowFullScreen />\r\n            </div>\r\n            <div>\r\n                <h4>{video.snippet.title}</h4>\r\n                <p>{video.snippet.description}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoDetails;","import React, { useState, useEffect, createContext } from 'react';\nimport SearchBar from \"./SearchBar\";\nimport youtube from \"./youtube\";\nimport VideoList from \"./VideoList\";\nimport VideoDetails from \"./VideoDetails\";\n\nimport './App.css';\n\nfunction App() {\n  const [videos, setVideos] = useState([]);\n  const [selectedVideos, setSelectedVideos] = useState(null);\n  const [darkTheme, setDarkTheme] = useState(false);\n\n\n  useEffect(() => {\n    onTermSubmit(\"ru piano nier main theme\");\n  }, []);\n\n  async function onTermSubmit(term){\n    const response = await youtube.get(\"/search\", {\n      params: {\n          q: term\n      }\n    })\n    setVideos(response.data.items)\n    setSelectedVideos(response.data.items[0])\n  } \n\n  function onVideoSelect(video){\n    setSelectedVideos(video);\n  }\n\n  function changeTheme(){\n      setDarkTheme(!darkTheme)\n  }\n\n  return (\n    <div className={`App container-fluid mt-2 ${darkTheme ? \"dark-theme\" : \"light-theme\"}` }>\n\n      <nav className={`navbar navbar-expand-lg ${darkTheme ? \"navbar-dark\" : \"navbar-light\" }  ${darkTheme ? \"bg-dark\" : \"bg-light\" }`}>\n          <a className=\"navbar-brand\" href=\"#\">\n            <img className=\"App-img mx-auto\" src=\"https://cdn2.iconfinder.com/data/icons/social-icons-33/128/Youtube-512.png\" />\n          </a>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n              </li>\n              \n            </ul>\n            \n            <div className=\"custom-control custom-switch\">\n              <input onClick={changeTheme} type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitch1\"/>\n              <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Dark Theme</label>\n            </div>\n          </div>\n      </nav>\n\n      <SearchBar onTermSubmit={onTermSubmit} />\n      <div className=\"row\">\n        <div className=\"col-7\">\n          <VideoDetails video={selectedVideos} />\n        </div>\n        <div className=\"col-5\">\n          <VideoList onVideoSelect={onVideoSelect} videos={videos} darkTheme={darkTheme} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}